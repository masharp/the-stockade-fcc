#!/usr/bin/env node
"use strict";
/*
 * Express Generated Node Server - with customization and added Socket.io Web Socket
 */

/* Module Dependencies */
const app = require('../app');
const db = require('../db');
const debug = require('debug')('the-stockade:server');
const http = require('http');
const request = require('request');

/* Get port from environment and store in Express */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/* Create HTTP Server */
const server = http.createServer(app);
const io = require('socket.io')(server);

/* Quandl Finance API - Combine these two, with the stock symbol in the middle */
const BASE_URL = 'https://www.quandl.com/api/v3/datasets/WIKI/';
const URL_FORMATTER = '/data.json?collapse=weekly&start_date=2014-01-01&' +
    'column_index=4&order=asc&api_key=' +  process.env.QUANDL_API;

/* Listen on provided port, on all network interfaces. */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* Set up Socket.io WebSocket */
io.on('connection', (socket) => {
  console.log('USER CONNECTED');
  testValidSymbol('SHIT');
  fetchStockData().then((stocks) => {
    socket.emit('initiate', stocks);
  });

  /* listen for updates to the tracked Symbols
    TODO: ensure the db does not add duplicates */
  socket.on('added', (symbol) => {
    if(testValidSymbol(symbol)) {
      db.updateSymbols('ADD', symbol).then((result) => {
        if(result === 'Success') {
          fetchStockData().then((response) => {
            io.emit('update', response);
          });
        } else if(result === 'Duplicate') {
          socket.emit('error:add', 'Duplicate Symbol');
        }
      });
    } else {
      socket.emit('error:add', 'Invalid stock symbol');
    }
  });

  /*lsiten for remova l of a tracked symbol */
  socket.on('removed', (symbol) => {
    db.updateSymbols('REMOVE', symbol).then((result) => {
      if(result === 'Success') {
        fetchStockData().then((response) => {
          io.emit('update', response);
        });
      }
    });
  });

  /* Listen for User Disconnect */
  socket.on('disconnect', () => {
    console.log('USER DISCONNECTED');
  });
});

/* Mve the test to the socket to avoid callbacks */
function testValidSymbol(symbol) {
  let requestString = BASE_URL + symbol + URL_FORMATTER;

  let testPromise = new Promise((resolve, reject) => {
    request.get(requestString, (error, response, body) => {
      if(error) reject(error);

      body = JSON.parse(body);
      if(body.quandl_error) resolve(false);
      else resolve(true);
    });

  testPromise.then((result) => {
    return
  })
  });


}

function fetchStockData() {
  //STOCK DATA PROMISE
  return new Promise( (resolve, reject) => {

    //DATABASE GET STOCK SYMBOLS PROMISE
    db.getSymbols().then((result) => {

      if(result) {
        let stockData = [];
        let finished = 0;

        for(let i = 0; i < result.list.length; i++) {
          let requestString = BASE_URL + result.list[i] + URL_FORMATTER;

          request.get(requestString, (error, response, body) => {
            if(error) reject(error);

            let stockObj = {
              name: result.list[i],
              values: [],
              strokeWidth: 2
            };

            JSON.parse(body).dataset_data.data.forEach((d) => {
              let temp = { x: d[0], y: d[1] };

              stockObj.values.push(temp);
            });

            stockData.push(stockObj);

            console.log(`${result.list[i]} parsed. Finished: ${finished}`);
            if(++finished === result.list.length) resolve(stockData);
          });
        }
      }
    });
  });
}

/* Normalize port into string, number, or false */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/* Event listener for HTTP server 'error' event */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  let bind = typeof port === 'string' ? ('Pipe ' + port) : ('Port ' + port);

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* Event listener for HTTP server 'listening' event */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? ('pipe ' + addr) : ('port ' + addr.port);
  debug('Listening on ' + bind);
}
