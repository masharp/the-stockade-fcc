#!/usr/bin/env node

'use strict';

/* Module Dependencies */
const dotenv = require('dotenv').config();
const debug = require('debug')('the-stockade:server');
const http = require('http');
const xhr = require('xhr');

const app = require('../app');
const utils = require('../scripts/utils');

/* Get port from environment and store in Express */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/* Create HTTP Server and Socket */
const server = http.createServer(app);
const io = require('socket.io')(server);

/* Listen on provided port, on all network interfaces. */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* Set up Socket.io WebSocket */
io.on('connection', (socket) => {
  console.log('USER CONNECTED');
  utils.fetchStockData(MONGO_URL);

  /* listen for updates to the tracked Symbols
    TODO: ensure the db does not add duplicates */
  socket.on('added', (symbol) => {
    console.log('SYMBOL ADDED');
    utls.testValidSymbol();
    io.emit('update', 'NEW SYMBOL');
    //utils.updateSymbols('ADD', symbol);
    //socket.emit('error:add', 'Duplicate Symbol');
    //socket.emit('error:add', 'Invalid Stock Symbol');
  });

  /* listen for removal of a tracked symbol */
  socket.on('removed', (symbol) => {
    console.log('SYMBOL REMOVED');
    //utils.updateSymbols('REMOVE', symbol);
    //io.emit('update', response);
  });

  /* Listen for User Disconnect */
  socket.on('disconnect', () => {
    console.log('USER DISCONNECTED');
  });
});

/* Normalize port into string, number, or false */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/* Event listener for HTTP server 'error' event */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  let bind = typeof port === 'string' ? ('Pipe ' + port) : ('Port ' + port);

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* Event listener for HTTP server 'listening' event */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? ('pipe ' + addr) : ('port ' + addr.port);
  debug('Listening on ' + bind);
}
